// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  correo   String @unique
  password String
  alias    String

  role         Role
  inventory    Inventory[]
  publications Publication[]
  comments     Comment[]
  likes        Likebook[]
  imagen       Imagen[]
}

enum Role {
  ADMIN
  USER
}

model Inventory {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  lib    Book @relation(fields: [libId], references: [id])
  libId  Int
}

model Book {
  id          Int    @id @default(autoincrement())
  title       String @unique
  descripcion String
  price     Float

  inventory     Inventory[]
  libCategories BookCategory[]
  likes         Likebook[]
  rankings      Rankingbook[]
  Autor         Autor[]
  imagen Imagen[]

  @@map("books")
}

model Imagen {
  id      Int    @id @default(autoincrement())
  url     String
  user    User?  @relation(fields: [user_id], references: [id])
  user_id Int?   // Made optional
  book    Book?  @relation(fields: [book_id], references: [id])
  book_id Int?   // Made optional

  @@unique([user_id, book_id])
}

model Autor {
  id    Int    @id @default(autoincrement())
  name  String
  books Book[]
}

model Likebook {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  lib    Book @relation(fields: [libId], references: [id])
  libId  Int

  @@unique([userId, libId])
}

model BookCategory {
  id         Int      @id @default(autoincrement())
  lib        Book     @relation(fields: [libId], references: [id])
  libId      Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}
model Category  {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  libCategories BookCategory[]
}

model Rankingbook {
  id      Int  @id @default(autoincrement())
  lib     Book @relation(fields: [libId], references: [id])
  libId   Int
  ranking Int  @default(0)
}

model Publication {
  id       Int       @id @default(autoincrement())
  title    String
  content  String
  user     User      @relation(fields: [userId], references: [id])
  userId   Int
  comments Comment[]
}

model Comment {
  id            Int         @id @default(autoincrement())
  content       String
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  publication   Publication @relation(fields: [publicationId], references: [id])
  publicationId Int
}
